# unified script

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

# === 1: Historical Credit Score ===
def calculate_historical_credit_score(excel_path, sheet_name=0, date_format="%d/%m/%Y", skip_header_lines=1):
    df = pd.read_excel(excel_path, sheet_name=sheet_name, skiprows=skip_header_lines, header=0)
    for col in ['Amt Out', 'PD1Y', 'Maturity']:
        if col not in df.columns:
            raise ValueError(f"Missing required column: {col}")
    today = datetime.today()
    df['MaturityDate'] = pd.to_datetime(df['Maturity'], format=date_format, dayfirst=True)
    df['YearsRemaining'] = (df['MaturityDate'] - today).dt.days / 365
    df['HCS'] = 1 - (1 - df['PD1Y']) ** df['YearsRemaining']
    df['Weight'] = df['Amt Out'] / df['Amt Out'].sum()
    return (df['Weight'] * df['HCS']).sum()

# === 2: Current Credit Score ===
def calculate_current_credit_score(enterprise_value, total_debt, n_simulations=10000, plot=False):
    min_stress, max_stress = 0.10, 0.80
    np.random.seed(42)
    raw_stress = np.random.normal(loc=-0.45, scale=0.15, size=n_simulations)
    bounded_stress = np.clip(raw_stress, -max_stress, -min_stress)
    stressed_ev = enterprise_value * (1 + bounded_stress)
    credit_score = np.mean(stressed_ev < total_debt)

    if plot:
        plt.figure(figsize=(10, 5))
        plt.hist(stressed_ev, bins=50, edgecolor='black')
        plt.axvline(total_debt, linestyle='--', label=f'Total Debt (€{total_debt:,})')
        plt.title("Distribution of Stressed Enterprise Value")
        plt.xlabel("Stressed EV (€)")
        plt.ylabel("Frequency")
        plt.legend()
        plt.tight_layout()
        plt.show()

    return credit_score

# === 3: Credit Utilization Score ===
def compute_credit_utilization_score(ebitda, total_debt, max_leverage):
    if ebitda <= 0 or max_leverage <= 0:
        raise ValueError("EBITDA and max_leverage must be positive.")
    score = 1 - (total_debt / (ebitda * max_leverage))
    return max(0.0, min(1.0, round(score, 5)))

# === 4: On-Chain Transaction Score ===
def calculate_transaction_score(cfo_list, weights=None):
    arr = np.array(cfo_list, dtype=float)
    if weights is None:
        weights = np.linspace(0.2, 1.0, len(arr))
    prod = arr * weights
    score = prod.sum() / np.abs(arr).sum() if np.abs(arr).sum() != 0 else 0.0
    df = pd.DataFrame({
        "Quarter":      [f"Q{i+1}" for i in range(len(arr))],
        "CFO (B€)":     arr / 1e9,
        "Weight":       weights,
        "Weighted CFO": prod / 1e9,
    })
    return score, df

# === 5a: Extract dates & amounts ===
def extract_dates_and_amounts(excel_path, date_column='Issue Date', amount_column='Amt Out',
                              date_format="%d/%m/%Y", skip_header_lines=1):
    df = pd.read_excel(excel_path, skiprows=skip_header_lines)
    df = df[[date_column, amount_column]].dropna()
    df[date_column] = pd.to_datetime(df[date_column], format=date_format, errors='coerce')
    df = df.dropna(subset=[date_column]).sort_values(by=date_column)
    dates   = df[date_column].dt.strftime("%Y-%m-%d").tolist()
    amounts = df[amount_column].astype(float).tolist()
    return dates, amounts

# === 5b: New Credit Score  ===
def calculate_new_credit_score(dates, amounts):
    date_objs = [datetime.strptime(d, "%Y-%m-%d") for d in dates]
    if len(date_objs) > 1:
        deltas = [(date_objs[i] - date_objs[i-1]).days for i in range(1, len(date_objs))]
        avg_delta = sum(deltas) / len(deltas)
    else:
        deltas, avg_delta = [], 0
    avg_amt = np.mean(amounts) if amounts else 0
    flags = []
    for i in range(1, len(amounts)):
        large = amounts[i] >= avg_amt
        close = deltas[i-1] <= avg_delta
        flags.append(1 if large and close else 0)
    score = sum(flags) / len(flags) if flags else 0.0
    df = pd.DataFrame({
        "Date":            dates,
        "Amt (€)":         amounts,
        "Days Since Prev": [None] + deltas,
        "Flagged Risky":   [None] + flags
    })
    return score, df

# === 6+7+8: Final OCCR Score ===
def compute_raw_occr_score(hcs, curr, util, trans, newc):
    return 0.35 * hcs + 0.25 * curr + 0.15 * util - 0.15 * trans + 0.10 * newc

def interpret_occr_score(score, hcs, curr, util, trans, newc):
    return f"OCCR Score = {score:.3f}"

# === Configuration des sociétés ===
COMPANIES = [
    {"ticker": "AAPL",   "enterprise": "Apple",                 "excel_path": "/Users/sacha/Desktop/NEOMA/DISSERTATION/Research/Firms/OCCR AAPL.xlsx",   "ev": 2_577_395_300_000, "total_debt":  85_068_400_000, "ebitda": 116_670_300_000,   "max_leverage": 1.5,  "cfo_list": [19_658_600_000, 25_002_600_000, 23_229_100_000, 25_935_700_000, 20_752_500_000]},
    {"ticker": "NVDA",   "enterprise": "NVIDIA",               "excel_path": "/Users/sacha/Desktop/NEOMA/DISSERTATION/Research/Firms/OCCR NVDA.xlsx",   "ev": 3_010_169_900_000, "total_debt":   8_910_000_000, "ebitda":  72_185_800_000,   "max_leverage": 1.5,  "cfo_list": [13_294_900_000, 12_552_400_000, 15_272_000_000, 14_407_400_000, 23_751_500_000]},
    {"ticker": "SAP",    "enterprise": "SAP",                  "excel_path": "/Users/sacha/Desktop/NEOMA/DISSERTATION/Research/Firms/OCCR SAP.xlsx",    "ev":   289_086_000_000, "total_debt":  10_107_000_000, "ebitda":   8_914_000_000,    "max_leverage": 2.0,  "cfo_list": [ 2_878_000_000,  1_540_000_000,  1_475_000_000,   -552_000_000,  3_780_000_000]},
    {"ticker": "STLAM",  "enterprise": "Stellantis",           "excel_path": "/Users/sacha/Desktop/NEOMA/DISSERTATION/Research/Firms/OCCR STLAP.xlsx", "ev":    25_354_600_000, "total_debt":  37_251_000_000, "ebitda":  10_696_000_000,   "max_leverage": 2.5,  "cfo_list": [ 4_546_000_000,  2_444_500_000,  2_444_500_000,   -440_500_000,   -440_500_000]},
    {"ticker": "VOW3",   "enterprise": "Volkswagen",           "excel_path": "/Users/sacha/Desktop/NEOMA/DISSERTATION/Research/Firms/OCCR VOW3.xlsx",   "ev":   261_774_900_000, "total_debt": 252_054_000_000, "ebitda":  33_969_000_000,   "max_leverage": 3.0,  "cfo_list": [ 1_766_000_000,  2_721_000_000,  7_339_000_000,  5_325_000_000,  2_976_000_000]},
    {"ticker": "F",      "enterprise": "Ford",                 "excel_path": "/Users/sacha/Desktop/NEOMA/DISSERTATION/Research/Firms/OCCR F.xlsx",     "ev":   150_374_000_000, "total_debt": 136_703_000_000, "ebitda":   9_588_400_000,    "max_leverage": 3.0,  "cfo_list": [ 1_200_000_000,  4_772_100_000,  4_766_900_000,  2_623_500_000,  3_187_500_000]},
    {"ticker": "EMEIS",  "enterprise": "EMEIS (ex-Orpea)",      "excel_path": "/Users/sacha/Desktop/NEOMA/DISSERTATION/Research/Firms/OCCR EMEIS.xlsx","ev":     10_032_100_000, "total_debt":   8_858_400_000, "ebitda":     81_100_000,    "max_leverage": 3.0,  "cfo_list": [    86_900_000,    82_300_000,    82_300_000,   153_700_000,   153_700_000]},
    {"ticker": "CLARI",  "enterprise": "Clariane",            "excel_path": "/Users/sacha/Desktop/NEOMA/DISSERTATION/Research/Firms/OCCR CLARI.xlsx",  "ev":      9_370_600_000, "total_debt":   7_983_700_000, "ebitda":    632_100_000,    "max_leverage": 3.25, "cfo_list": [   250_900_000,   217_200_000,   217_100_000,   233_000_000,   233_000_000]},
    {"ticker": "UHS",    "enterprise": "Universal Health Serv.","excel_path": "/Users/sacha/Desktop/NEOMA/DISSERTATION/Research/Firms/OCCR UHS.xlsx",   "ev":     14_078_300_000, "total_debt":   4_413_600_000, "ebitda":   1_966_600_000,    "max_leverage": 2.5,  "cfo_list": [   343_400_000,   588_500_000,   288_500_000,   570_500_000,   311_900_000]},
    {"ticker": "ENGI",   "enterprise": "Engie",               "excel_path": "/Users/sacha/Desktop/NEOMA/DISSERTATION/Research/Firms/OCCR ENGI.xlsx",  "ev":     89_477_000_000, "total_debt":  52_438_100_000, "ebitda":  13_516_200_000,   "max_leverage": 4.0,  "cfo_list": [17_967_500_000,  4_487_000_000,  4_487_000_000,  2_085_000_000,  2_085_000_000]},
    {"ticker": "IBE.MC", "enterprise": "Iberdrola",           "excel_path": "/Users/sacha/Desktop/NEOMA/DISSERTATION/Research/Firms/OCCR IBE.xlsx",  "ev":    175_771_600_000, "total_debt":  60_084_000_000, "ebitda":  16_563_000_000,   "max_leverage": 4.0,  "cfo_list": [  3_145_000_000,  2_995_000_000,  2_995_000_000,  2_995_000_000,  3_502_000_000]},
    {"ticker": "NG.L",   "enterprise": "National Grid",       "excel_path": "/Users/sacha/Desktop/NEOMA/DISSERTATION/Research/Firms/OCCR NG.xlsx",   "ev":    110_609_700_000, "total_debt":  56_939_200_000, "ebitda":   6_831_300_000,    "max_leverage": 4.25, "cfo_list": [  2_385_100_000,  1_527_700_000,  1_527_700_000,  2_454_100_000,  2_454_100_000]},
]


# === Exécution et tableau récapitulatif ===
results = []
for comp in COMPANIES:
    hcs = calculate_historical_credit_score(comp["excel_path"])
    curr = calculate_current_credit_score(comp["ev"], comp["total_debt"], plot=False)
    util = compute_credit_utilization_score(comp["ebitda"], comp["total_debt"], comp["max_leverage"])
    trans, _ = calculate_transaction_score(comp["cfo_list"])
    dates, amounts = extract_dates_and_amounts(comp["excel_path"])
    newc, _ = calculate_new_credit_score(dates, amounts)
    raw_occr = compute_raw_occr_score(hcs, curr, util, trans, newc)

    results.append({
        "Ticker":       comp["ticker"],
        "Entreprise":   comp["enterprise"],
        "max_leverage": comp["max_leverage"],
        "HCS":          round(hcs, 5),
        "Current CS":   round(curr, 5),
        "Utilization":  round(util, 5),
        "Trans. CS":    round(trans, 5),
        "New CS":       round(newc, 5),
        "raw_occr":     round(raw_occr,5),           
    })

#  min & max on raw_occr
min_raw = min(r["raw_occr"] for r in results)
max_raw = max(r["raw_occr"] for r in results)

# New column with Noralizd OCCR
for r in results:
    r["Norm. OCCR"] = round((r["raw_occr"] - min_raw) / (max_raw - min_raw), 5)

# === DataFrames ===
df = pd.DataFrame(results).set_index(["Ticker","Entreprise","max_leverage"])
print(df[[
    "HCS","Current CS","Utilization","Trans. CS","New CS",
    "raw_occr","Norm. OCCR"
]])
